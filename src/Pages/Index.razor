@page "/"
@page "/Page/{PageNumber:int}"
@page "/{Year:int}"
@page "/{Year:int}/{Month:int}"
@page "/{Year:int}/{Month:int}/{Day:int}"
@page "/{Year:int}/{Month:int}/{PermaLink?}"
@page "/{Year:int}/Page/{PageNumber:int}"
@page "/{Year:int}/{Month:int}/Page/{PageNumber:int}"
@page "/{Year:int}/{Month:int}/{Day:int}/Page/{PageNumber:int}"
@page "/category/{Category}"
@page "/category/{Category}/Page/{PageNumber:int}"
@page "/{*pageRoute}"
@inject IConfiguration Configuration
@inject HttpClient Http
@using System.Linq
@using BlazorBlog.Models
@using BlazorBlog.Shared

@if (pagedBlogEntries == null)
{
    <!-- Start Main Content -->
    <div class="container">
        <div class="row">
            <div class="col-lg-10 col-md-12 mx-auto">
                <p><em>Chopping the (b)logs for the fire...</em></p>
            </div>
        </div>
    </div>
    <!-- End Main Content -->
}
else
{
    <!-- Start Main Content -->
    <div class="container">
        <div class="row">
            <div class="col-lg-8 col-md-10 mx-auto">

                @DebugData

                <BlogHeader Year="@Year" Month="@Month" Day="@Day" PermaLink="@PermaLink" Category="@Category" />

                @if (this.pagedBlogEntries.Count == 0)
                {
                    <span>No blog entries found for your selection!</span>
                }
                else
                {
                    if (string.IsNullOrEmpty(PermaLink))
                    {
                        @foreach (EntryModel entry in pagedBlogEntries)
                        {
                            <BlogSummaryRender Entry="@entry" />
                        }
                    }
                    else
                    {
                        <BlogRender Entry="@pagedBlogEntries.First()" />
                    }

                    <BlogPager Count="@this.TotalPages" PageSize="@PageSize" PageNumber="@PageNumber" Year="@Year" Month="@Month" Day="@Day" />
                }
            </div>
            <TagCloud BlogItems="@this.blogEntries" />
        </div>
    </div>
    <!-- End Main Content -->
}

@code {
    protected override async Task OnInitializedAsync()
    {
        var posts = new List<EntryModel>();
        var postFolder = Configuration["postDirectory"];
        var postManifest = Configuration["postManifestFilename"];
        var postDirectory = await Http.GetStringAsync($"{postFolder}/{postManifest}");

        var postFilenames = postDirectory.Split(Environment.NewLine);
        foreach (var postFilename in postFilenames)
        {
            if (string.IsNullOrEmpty(postFilename))
            {
                continue;
            }

            var post = await Http.GetFromJsonAsync<EntryModel>($"{postFolder}/{postFilename}");

            posts.Add(post!);
        }

        var allBlogEntries = posts;

        blogEntries = allBlogEntries?.OrderByDescending(be => be.Created).ToList();

        SetPagedFilteredBlog();
    }
}
